import React, { useState, useEffect, useCallback, useRef } from "react";
import "../styles/News.css";
import { FaPhoneAlt, FaEnvelope, FaClock, FaChevronLeft, FaChevronRight } from "react-icons/fa";

// Datos de ejemplo para los comunicados
const newsData = [
  {
    id: 1,
    title: "Nueva Ley de Transparencia Gubernamental Aprobada",
    description: "El gobierno aprueba una nueva ley que fortalece la transparencia en las instituciones públicas, garantizando mayor acceso a la información ciudadana.",
    date: "15 Jun 2024",
    link: "#",
  },
  {
    id: 2,
    title: "Inauguración del Nuevo Hospital Regional",
    description: "Se inaugura el moderno hospital regional que beneficiará a más de 200,000 habitantes con servicios médicos de alta calidad y tecnología avanzada.",
    date: "10 Jun 2024",
    link: "#",
  },
  {
    id: 3,
    title: "Programa de Becas Estudiantiles 2024",
    description: "Lanzamiento del programa nacional de becas que otorgará 5,000 becas a estudiantes destacados para continuar sus estudios superiores.",
    date: "5 Jun 2024",
    link: "#",
  },
  {
    id: 4,
    title: "Inversión en Infraestructura Vial",
    description: "El gobierno anuncia una inversión de $50 millones para mejorar la infraestructura vial en las principales ciudades del país.",
    date: "1 Jun 2024",
    link: "#",
  },
  {
    id: 5,
    title: "Plan Nacional de Digitalización",
    description: "Implementación del plan nacional de digitalización para modernizar los servicios públicos y facilitar los trámites ciudadanos.",
    date: "28 May 2024",
    link: "#",
  },
];

const News = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isPaused, setIsPaused] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  const intervalRef = useRef(null);
  // Remove unused hovered state since we're using isPaused for hover state

  const goToSlide = useCallback((index) => {
    setCurrentIndex(index);
  }, []);

  // Navigation functions
  const goToPrevious = useCallback(() => {
    setCurrentIndex(prev => (prev - 1 + newsData.length) % newsData.length);
  }, []);

  const goToNext = useCallback(() => {
    setCurrentIndex(prev => (prev + 1) % newsData.length);
  }, []);

  // Efecto para el slider automático cada 3 segundos
  useEffect(() => {
    if (!isPaused) {
      intervalRef.current = setInterval(() => {
        goToNext();
      }, 3000);
      return () => {
        if (intervalRef.current) clearInterval(intervalRef.current);
      };
    }
  }, [isPaused, goToNext]);

  // Actualizar la hora cada minuto
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000);
    return () => clearInterval(timer);
  }, []);
  
  // Slide positioning and scaling logic
  const getSlideClass = (index) => {
    if (index === currentIndex) return 'news-slide-center';
    if (
      index === (currentIndex - 1 + newsData.length) % newsData.length ||
      index === (currentIndex + 1) % newsData.length
    ) {
      return 'news-slide-adjacent';
    }
    return 'news-slide-far';
  };
  
  // This function is used in the slider positioning
  const getSlidePosition = (index) => {
    const diff = index - currentIndex;
    const totalSlides = newsData.length;
    
    if (diff === 0) return 0;
    if (diff === 1 || diff === -(totalSlides - 1)) return 1;
    if (diff === -1 || diff === totalSlides - 1) return -1;
    if (diff > 0) return 2;
    return -2;
  };

  const formatTime = (date) => {
    return date.toLocaleTimeString('es-PA', { hour: '2-digit', minute: '2-digit' });
  };

  const formatDate = (date) => {
    return date.toLocaleDateString('es-PA', { 
      day: '2-digit',
      month: 'short',
      year: 'numeric'
    });
  };

  // Obtener todas las noticias para el slider
  const totalSlides = newsData.length;
  const visibleSlides = newsData.map((item, index) => {
    // Calcular la posición relativa al slide actual
    let positionClass = '';
    let transformX = 0;
    let zIndex = 0;
    let opacity = 0.6;
    let scale = 0.8;
    
    if (index === currentIndex) {
      // Slide actual (centro)
      positionClass = 'news-slide-center';
      transformX = 0;
      zIndex = 3;
      opacity = 1;
      scale = 1;
    } else if (
      index === (currentIndex - 1 + totalSlides) % totalSlides ||
      index === (currentIndex + 1) % totalSlides
    ) {
      // Slides adyacentes
      positionClass = 'news-slide-adjacent';
      transformX = index < currentIndex ? -100 : 100;
      zIndex = 2;
      opacity = 0.8;
      scale = 0.9;
    } else {
      // Slides lejanos
      positionClass = 'news-slide-far';
      transformX = index < currentIndex ? -200 : 200;
      zIndex = 1;
      opacity = 0.6;
      scale = 0.8;
    }
    
    return {
      ...item,
      position: positionClass,
      transformX,
      zIndex,
      opacity,
      scale
    };
  });

  return (
    <section className="news-section">
      {/* Header with info bubbles */}
      <div className="news-header">
        {/* Date/Time Bubble */}
        <div className="info-bubble time-bubble">
          <FaClock className="info-icon" />
          <div className="info-content">
            <span className="info-time">{formatTime(currentTime)}</span>
            <span className="info-date">{formatDate(currentTime)}</span>
          </div>
        </div>
        
        {/* Title */}
        <h2 className="news-section-title">Comunicados</h2>
        
        {/* Help Bubble */}
        <div className="info-bubble help-bubble">
          <div className="info-content">
            <span className="help-title">¿Necesitas ayuda?</span>
            <div className="contact-method">
              <FaPhoneAlt className="contact-icon" />
              <span>500-0000</span>
            </div>
          </div>
        </div>
      </div> {/* Close news-header */}
      
      {/* Slider Container */}
      <div 
        className="news-carousel"
        onMouseEnter={() => setIsPaused(true)}
        onMouseLeave={() => setIsPaused(false)}
      >
        {/* Navigation Arrows */}
        <button 
          className="news-arrow news-arrow--prev" 
          onClick={goToPrevious}
          aria-label="Anterior"
        >
          <FaChevronLeft />
        </button>
        
        {/* Slides */}
        <div className="news-slides-container">
          {visibleSlides.map((slide) => (
            <div 
              key={slide.id}
              className={`news-slide ${slide.position}`}
              style={{
                transform: `translateX(${slide.transformX}%) scale(${slide.scale})`,
                zIndex: slide.zIndex,
                opacity: slide.opacity,
                transition: 'transform 0.5s ease, opacity 0.5s ease, z-index 0.5s ease',
                position: 'absolute',
                left: '50%',
                top: '50%',
                transformOrigin: 'center center'
              }}
            >
              <div className="news-content">
                <div className="news-date">{slide.date}</div>
                <h3 className="news-title">{slide.title}</h3>
                <p className="news-desc">{slide.description}</p>
                <button className="news-more-info">
                  Ver más detalles
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                </button>
              </div>
            </div>
          ))}
        </div>
        
        <button 
          className="news-arrow news-arrow--next" 
          onClick={goToNext}
          aria-label="Siguiente"
        >
          <FaChevronRight />
        </button>
      </div>
      
      {/* Navigation Dots */}
      <div className="news-dots">
        {newsData.map((_, idx) => (
          <button
            key={idx}
            className={`news-dot ${idx === currentIndex ? 'active' : ''}`}
            onClick={() => goToSlide(idx)}
            aria-label={`Ir al comunicado ${idx + 1}`}
            aria-current={idx === currentIndex ? 'step' : undefined}
          />
        ))}
      </div>
    </section>
  );
};

export default News;